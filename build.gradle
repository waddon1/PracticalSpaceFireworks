buildscript {
    repositories {
        gradlePluginPortal()
        maven { url = 'https://maven.neoforged.net/releases' }
        mavenCentral()
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.80'
    id 'org.spongepowered.mixin' version '0.7.+'
}

group = maven_group
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    copyIdeResources = true
    
    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'neoforge.logging.markers', 'REGISTRIES'
            property 'neoforge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'neoforge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'neoforge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'neoforge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven { url = 'https://maven.neoforged.net/releases' }
    maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    maven { url = 'https://modmaven.dev/' }
    maven { 
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        url "https://cursemaven.com"
    }
}

dependencies {
    minecraft "net.neoforged:neoforge:${minecraft_version}-${neoforge_version}"
    
    // Only if you have JEI
    if (project.hasProperty('jei_version')) {
        implementation fg.deobf("mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}")
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Process resources
processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "neoforge_version", neoforge_version

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand([
                'version': project.version,
                'minecraft_version': minecraft_version,
                'neoforge_version': neoforge_version,
                'mod_id': mod_id,
                'mod_version': version,
                'mod_author': mod_author
        ])
    }
}

// Jar configuration
jar {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}