plugins {
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle' version '7.0.80'  // Latest NeoForge Gradle plugin
    id 'io.franzbecker.gradle-lombok' version '6.0.0'  // Updated Lombok plugin
}

version = '1.0.0'  // Update this based on your versioning scheme
group = 'net.gegy1000'  // Your existing group
archivesBaseName = 'practical-space-fireworks'

// Configure Java compatibility - Updated to Java 21
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)  // Updated to Java 21
    }
    // Enable preview features if needed
    withSourcesJar()
    withJavadocJar()
}

minecraft {
    mappings channel: 'official', version: '1.21.1'
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // Add Java 21 specific flags
            jvmArgs = [
                '--enable-preview',
                '-XX:+UnlockExperimentalVMOptions',
                '-Djava.security.manager=allow'
            ]
            mods {
                practicalspacefireworks {
                    source sourceSets.main
                }
            }
        }
        
        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // Add Java 21 specific flags
            jvmArgs = [
                '--enable-preview',
                '-XX:+UnlockExperimentalVMOptions',
                '-Djava.security.manager=allow'
            ]
            mods {
                practicalspacefireworks {
                    source sourceSets.main
                }
            }
        }
        
        data {
            workingDirectory project.file('run/data')
            args '--mod', 'practicalspacefireworks', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            // Add Java 21 specific flags
            jvmArgs = [
                '--enable-preview',
                '-XX:+UnlockExperimentalVMOptions',
                '-Djava.security.manager=allow'
            ]
            mods {
                practicalspacefireworks {
                    source sourceSets.main
                }
            }
        }
    }
}

// Repositories for dependencies
repositories {
    mavenCentral()
    maven { 
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases' 
    }
    maven {
        name = 'ModMaven'
        url = 'https://modmaven.dev'
    }
    maven { 
        url = 'https://maven.tterrag.com/' 
    }
}

dependencies {
    // NeoForge
    minecraft "net.neoforged:neoforge:${minecraft_version}-${neoforge_version}"
    
    // JEI - Update version as needed
    implementation fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")
    
    // Updated Lombok for Java 21
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
}

// Processing resources
processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", minecraft_version
    
    filesMatching('META-INF/mods.toml') {
        expand 'version': project.version,
               'minecraft_version': minecraft_version
    }
}

// Jar configuration
jar {
    manifest {
        attributes([
            "Specification-Title": "practicalspacefireworks",
            "Specification-Vendor": "waddon1",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": project.jar.archiveVersion,
            "Implementation-Vendor": "waddon1",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            // Add Java 21 specific manifest entries
            "Multi-Release": "true"
        ])
    }
}

// Add specific Java 21 compiler options
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
        '--enable-preview',
        '-Xlint:preview'
    ]
}